{# templates/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Report{% endblock %}

{% block body %}
<div class="container">
    <article>

        <header>
        <h1>Redovisning av kursmoment i kursen mvc</h1>

        </header>

        <section>
        <h2>Kmom01</h2>
        <p>I den nya kursen mvc ska vi lära oss jobba med objektorienterad php. Jag har bara erfarenhet av objektorienterad programmering från oopython kursen. Det verkar dock som objektorienterad paradigm är ganska lik i båda programmeringsspråken. För att skapa en klass i php skriver man nyckelord ”class” följt av namnet på klassen med första bokstaven som versal. Ett objekt skapas utifrån en klass. För att skapa en instans av klassen skriver man nyckelordet ”new” följt av namnet på klassen man vill skapa en instans av. I php har man ett nyckelord ”this” (”self” i python) som refererar till just den specifika instansen. Klassen kan ha properties (konstanter, variabler) och metoder (funktioner). Man kan också ha en konstruktor (function __construct()) på en klass som anropas när ett nytt objekt skapas. Konstruktor är en av de magiska metoderna som också är tillgängliga i php. Andra magiska metoder som jag har läst om är  __destruct(), __get, __set(), __toString(), etc. Jag känner att jag har förståelse av klasser och objekt men behöver ändå lite mer övning för att se hur man jobbar med de i php i verkligheten. </p>
        <p>Den kodbasen vi använde oss i uppgiften ”report” upplevs som ganska stor, men efter att ha utfört uppgiften så har det lagt sig på plats i mitt huvud på något sätt. Det viktigaste är att skapa en kontroller (en klass som ärver från AbstractController klass) som ska innehålla alla routes man vill ha. Varje route renderar en twig template som ligger i templates katalogen. Med twig har vi bekantat oss i design kursen men vi jobbade inte så mycket med den templaten då. Denna gången förstod jag lite bättre hur twig fungerar, det är också bra att vi har en ”base.html.twig” fil som alla andra templates kan extenda. </p>
        <p>Jag har kollat på olika delar i artikeln “PHP The Right Way”. Den innehåller också många externa länkar där man kan läsa djupare om ett visst ämne. I artikeln har jag kollat på design patterns, frameworks och composer. Det var ganska korta små artiklar som gav en snabb inblick i de begreppen.</p>
        <p>Min TIL för detta kursmoment är allt om Symphony och bättre förståelse av twig templates. </p>
        </section>

        <section>
        <h2>Kmom02</h2>
        <p>Arv är en konstruktion som används i objektorienterad programmering för att möjliggöra en klass(subklass) att ärva attribut och metoder från en annan klass (basklass). Arv är viktigt för att det hjälper att undvika repetition och gör kod mer strukturerad. Klasser kan ha olika relationer, en av dem är komposition. Komposition är en stark koppling mellan klasser (has-a relation), dvs att en klass äger den andra. Interface är en så kallad mal för en viss klass. När man definierar ett interface till en klass då tvingar man den klassen att ha just de metoderna och attributen som finns i interfacet. Jag har läst lite om vad trait är, som jag förstod det så används trait istället for multiple arv i andra programmeringsspråk. Men jag kan inte säga att jag förstod just hur och när man använder det, jag har använt varken interface eller trait i min kod.</p>
        <p>Jag måste säga att uppgiften var ganska svår för mig, det tog rätt så mycket tid att lösa det. Jag förstod direkt att jag behövde skapa Card och Deck objekt och hur de skulle samarbeta. Jag har dock inte gjort sortering som en metod på Deck, jag skickar bara kortnummer och suits i rätt ordning när jag skapar Deck så att Deck objektet innehåller kort i sorterad ordning redan från början. Om sanningen ska fram visste jag inte hur jag skulle sortera en array på en sak först, och sedan på en annan (i python har vi itemgetter och då gick vi igenom det på en lektion). I deck2 har jag skapat en klass som ärver från deck men jag visste inte direkt hur jag skulle göra att den decken innehåller två jokrar. Jag har skapat en metod som bara lägger till ett joker kort till deck arrayen och kallar på den metoden två gånger i min route /card/deck2. Det finns säkert förbättringspotential i min kod, jag återanvänder kod i mina routes, särskilt i /draw, /draw/{number} och /draw/{player}/{cards}, men det gjorde jag bara för att det fanns vissa små saker som var annorlunda i varje route och ville bara få det att fungera. </p>
        <p>Jag ville också nämna att /draw och /draw/{number} jobbar mot samma session, medan card/deck/deal/{players}/{cards} har sin egen session.</p>
        <p>När jag gjorde JSON API kollade jag bara på LuckyControllerJson exemplet och skrev koden som där, men jag måste säga att jag saknade lektion om json. I varje kurs nämns json på något sätt men jag vill veta hur det fungerar egentligen, hur man använder det, i vilka fall man använder det, hur det hänger ihop med webbsidor – det känns som json fortfarande är ett grått område för mig.</p>
        <p>Jag har inte gjort Problemlösningsdelen, tänker göra i nästa kmomet då jag hoppas att vi ska gå igenom på nästa lektion hur ett sådant spel skulle se ut, kanske finns det ett färdigt exempel på ett fungerande spel? Dessutom har jag inte spelat kortspel så mycket så det är extra svårt för mig att förstå det här med regler och spelflödet.</p>
        </section>

        <section>
        <h2>Kmom03</h2>
        <p>Här är redovisningstexten</p>
        </section>

        <section>
        <h2>Kmom04</h2>
        <p>Här är redovisningstexten</p>
        </section>

        <section>
        <h2>Kmom05</h2>
        <p>Här är redovisningstexten</p>
        </section>

        <section>
        <h2>Kmom06</h2>
        <p>Här är redovisningstexten</p>
        </section>

        <section>
        <h2>Kmom07-10</h2>
        <p>Här är redovisningstexten</p>
        </section>

        </article>
        
</div>

{% endblock %}